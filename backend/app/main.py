from fastapi import Depends, FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict, List, Optional
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from db.database import get_db
from sqlalchemy import text, select
from fastapi import HTTPException
import httpx
import os
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from .schemas import (
    DashboardMetrics,
    HouseListItem,
    HouseDetail,
    LLMQuestionRequest,
)

from .real_data import (
    REGION_ID_TO_NAME,
    get_full_llm_context,
    get_incident_history_for_llm,
    get_real_dashboard_metrics,
    get_real_house_list,
    get_real_house_detail,
    get_real_llm_context,
    get_regional_forecast_cold_water_24h_hourly_random,
    get_regional_incident_stats,
    get_water_data_for_llm,
)
from .models import LublinoHousesId, StatusHealth

app = FastAPI(title="GVS Monitoring API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

load_dotenv() 

# Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.mail.ru")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
NOTIFICATION_EMAILS = [email.strip() for email in os.getenv("NOTIFICATION_EMAILS", "").split(",") if email.strip()]

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

def format_regional_forecasts_for_llm(forecast_list: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –•–í–° –¥–ª—è LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    if not forecast_list:
        return "–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –•–í–° –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –¥–æ–º–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ (1-—á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª)."
    lines = []
    for item in forecast_list[:20]: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        addr = item["address"]
        time_str = item["time_str"]
        value = item["forecast_value"]
        lines.append(f"- {addr} ({time_str}): {value} (–ø—Ä–æ–≥–Ω–æ–∑)")
    return "\n".join(lines)


def send_email_notification(house_id: str, address: str, status: str, incident_status: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
    """
    if not EMAIL_USER or not EMAIL_PASSWORD or not NOTIFICATION_EMAILS:
        print(f"Email configuration not set, skipping notification")
        print(f"EMAIL_USER: {EMAIL_USER is not None}")
        print(f"EMAIL_PASSWORD: {EMAIL_PASSWORD is not None}")
        print(f"NOTIFICATION_EMAILS: {NOTIFICATION_EMAILS}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
    if status.lower() not in ['red', 'yellow']:
        print(f"Skipping notification for status: {status}")
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    status_mapping = {
        'red': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
        'yellow': '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π', 
        'green': '–í –Ω–æ—Ä–º–µ'
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    incident_mapping = {
        'New': '–ù–æ–≤—ã–π',
        'Work': '–í —Ä–∞–±–æ—Ç–µ',
        'Repair': '–í —Ä–µ–º–æ–Ω—Ç–µ',
        'Resolved': '–†–µ—à–µ–Ω',
        'None': '–°—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–∞–Ω'
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Ä—É—Å—Å–∫–∏–µ
    russian_status = status_mapping.get(status.lower(), status)
    russian_incident_status = incident_mapping.get(incident_status, incident_status)
    
    subject = f"üö® –ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –¥–æ–º–µ - {address}"
    
    body = f"""
    <html>
    <body>
        <h2>üö® –ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –¥–æ–º–µ</h2>
        <p><strong>ID –¥–æ–º–∞:</strong> {house_id}</p>
        <p><strong>–ê–¥—Ä–µ—Å:</strong> {address}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å –¥–æ–º–∞:</strong> {russian_status}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:</strong> {russian_incident_status}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <hr>
        <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ì–í–°.</p>
    </body>
    </html>
    """
    
    try:
        print(f"Attempting to send email to: {NOTIFICATION_EMAILS}")
        
        msg = MIMEMultipart()
        msg['From'] = EMAIL_USER
        msg['To'] = ", ".join(NOTIFICATION_EMAILS)
        msg['Subject'] = subject
        
        msg.attach(MIMEText(body, 'html'))
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞
        if SMTP_PORT == 465:
            # SSL
            print(f"Using SSL connection to {SMTP_SERVER}:{SMTP_PORT}")
            with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT) as server:
                server.login(EMAIL_USER, EMAIL_PASSWORD)
                server.send_message(msg)
        else:
            # TLS
            print(f"Using TLS connection to {SMTP_SERVER}:{SMTP_PORT}")
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls()
                server.login(EMAIL_USER, EMAIL_PASSWORD)
                server.send_message(msg)
        
        print(f"Email notification sent successfully for house {house_id}")
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"SMTP Authentication Error: {e}")
        print("Check your email credentials and app password settings")
    except smtplib.SMTPRecipientsRefused as e:
        print(f"SMTP Recipients Refused Error: {e}")
        print(f"Check if recipient emails are valid: {NOTIFICATION_EMAILS}")
    except smtplib.SMTPConnectError as e:
        print(f"SMTP Connection Error: {e}")
        print(f"Check if {SMTP_SERVER}:{SMTP_PORT} is accessible")
    except Exception as e:
        print(f"Failed to send email notification: {e}")
        import traceback
        traceback.print_exc()
        

def format_regional_incidents_for_llm(incidents_list: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    if not incidents_list:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ top-10
    lines = []
    for item in incidents_list:
        addr = item["address"]
        time_str = item["time_str"]
        type_str = item["type_incdnt_str"]
        comment_str = item["comment_incdnt"]
        # change_str = f"{item['change_1h_percent']:.2f}%" if item['change_1h_percent'] is not None else "N/A"
        # lines.append(f"- {addr} ({time_str}): {type_str} (–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str}) - {comment_str}")
        lines.append(f"- {addr} ({time_str}): {type_str} - {comment_str}")
    return "\n".join(lines)


def format_incident_history(history: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–∞).
    """
    if not history:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    lines = []
    for item in history: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        time_str = item["time_str"]
        type_str = item["type_incdnt_str"]
        change_str = f"{item['change_1h_percent']:.2f}%" if item['change_1h_percent'] is not None else "N/A"
        comment_str = item["comment"] or "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        lines.append(f"- {time_str}: {type_str} (–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str}) - {comment_str}")
    return "\n".join(lines)


@app.post("/api/houses/{house_id}/ask-llm")
async def ask_llm_about_house(house_id: str, payload: LLMQuestionRequest, db: AsyncSession = Depends(get_db)):
    question = payload.question.strip()
    if not question:
        raise HTTPException(status_code=400, detail="Question is required")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
    house = await get_real_house_detail(db, house_id)
    if not house:
        raise HTTPException(status_code=404, detail="House not found")

    if not OPENROUTER_API_KEY:
        raise HTTPException(status_code=500, detail="OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥—É –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º
    water_data = await get_water_data_for_llm(db, house_id)
    incident_history = await get_incident_history_for_llm(db, house_id, hours_back=720)
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    context = f"""–î–æ–º: {house.address}
–°—Ç–∞—Ç—É—Å: {house.status}
–ò–Ω—Ü–∏–¥–µ–Ω—Ç: {house.incident_status}
–£–ù–û–ú: {house.unom}
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥—É –≤–æ–¥—ã (1-—á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª):
{format_water_data(water_data.get('consumption_1h', []))}
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º (1-—á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª):
{format_water_data(water_data.get('diffr_1h', []))}
–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥—É –•–í–° (–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–æ–≤, 1-—á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª):
{format_water_data(water_data.get('forecast_cold_water_24h_hourly', []))}
–ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü):
{format_incident_history(incident_history)}
"""

    prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –ì–í–°. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º Repair - –í —Ä–µ–º–æ–Ω—Ç–µ, New - –ù–æ–≤—ã–π, Resolved - –†–µ—à–µ–Ω. Work - –í —Ä–∞–±–æ—Ç–µ. None - –°—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–∞–Ω.

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Ç–æ–∫–µ–Ω–æ–≤. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—ä—ë–º–Ω–∞—è ‚Äî —Å–æ–∂–º–∏ –µ—ë, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—É—Ç—å.

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ –ì–í–° –∏–ª–∏ –¥–æ–º–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ.
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö".
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: **–∂–∏—Ä–Ω—ã–π** –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π.

–î–∞–Ω–Ω—ã–µ: {context}

–í–æ–ø—Ä–æ—Å: "{question}"
"""

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",  # –£–ë–†–ê–õ –ü–†–û–ë–ï–õ–´
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "deepseek/deepseek-chat-v3.1:free",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.3,
                    "max_tokens": 1500
                }
            )
            if resp.status_code != 200:
                error_msg = resp.json().get("error", {}).get("message", "Unknown error")
                print(f"OpenRouter error {resp.status_code}: {error_msg}")
                raise HTTPException(status_code=502, detail=f"OpenRouter error: {error_msg}")

            answer = resp.json()["choices"][0]["message"]["content"].strip()
            return {"answer": answer}

    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")


def format_water_data(data: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    lines = []
    for item in data:  # –£–±—Ä–∞–ª–∏ [:5]
        time_str = item["time"]
        values = item.get("values", {})
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã values
        # –ï—Å–ª–∏ –µ—Å—Ç—å 'series_type', –º–æ–∂–Ω–æ –µ–≥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å
        values_str_parts = []
        for k, v in values.items():
            if v is not None:
                if k == 'series_type':
                    values_str_parts.append(f"{v}") # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, (–ø—Ä–æ–≥–Ω–æ–∑)
                else:
                    values_str_parts.append(f"{k}: {v}")
        values_str = ", ".join(values_str_parts)
        lines.append(f"- {time_str}: {values_str}")
    return "\n".join(lines)

@app.post("/api/ask-llm")
async def ask_llm_about_all_houses(payload: LLMQuestionRequest, db: AsyncSession = Depends(get_db)):
    question = payload.question.strip()
    if not question:
        raise HTTPException(status_code=400, detail="Question is required")
    if not OPENROUTER_API_KEY:
        raise HTTPException(status_code=500, detail="OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx = await get_full_llm_context(db, "lublino")
    # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    incident_stats = await get_regional_incident_stats(db, "lublino", hours_back=24)
    forecast_stats = await get_regional_forecast_cold_water_24h_hourly_random(db, num_houses=5)
    print(forecast_stats)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    stats = ctx["status_breakdown"]
    context = f"""–†–∞–π–æ–Ω: {ctx['region']}
–í—Å–µ–≥–æ –¥–æ–º–æ–≤: {ctx['total_houses']}
–°—Ç–∞—Ç—É—Å—ã –¥–æ–º–æ–≤:
- üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (Red): {stats['red']}
- üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (Yellow): {stats['yellow']}
- üü¢ –í –Ω–æ—Ä–º–µ (Green): {stats['green']}
- üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ (–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã): {stats['in_work']}
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {incident_stats.get('summary', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º Repair - –í —Ä–µ–º–æ–Ω—Ç–µ, New - –ù–æ–≤—ã–π, Resolved - –†–µ—à–µ–Ω. Work - –í —Ä–∞–±–æ—Ç–µ. None - –°—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–∞–Ω.
–¢–û–ü-10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):
{format_regional_incidents_for_llm(incident_stats.get('recent_incidents_list', []))}
–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –•–í–° (–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞, 1-—á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª): {forecast_stats.get('summary', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–ø–µ—Ä–≤—ã–µ 20):
{format_regional_forecasts_for_llm(forecast_stats.get('forecast_list', []))}
–î–æ–º–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (–ø—Ä–∏–º–µ—Ä—ã):
{chr(10).join(ctx['problem_houses_list']) if ctx['problem_houses_list'] else '–ù–µ—Ç –¥–æ–º–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏'}"""
    prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –ì–í–°. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Ç–æ–∫–µ–Ω–æ–≤. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—ä—ë–º–Ω–∞—è ‚Äî —Å–æ–∂–º–∏ –µ—ë, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—É—Ç—å.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ –ì–í–° –∏–ª–∏ –¥–æ–º–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.
–ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ.
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö".
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: **–∂–∏—Ä–Ω—ã–π** –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π.
–ö–û–ù–¢–ï–ö–°–¢:
{context}
–í–û–ü–†–û–°:
"{question}"
"""
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",  
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "deepseek/deepseek-chat-v3.1:free",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.3,
                    "max_tokens": 500
                }
            )
            if resp.status_code != 200:
                error_msg = resp.json().get("error", {}).get("message", "Unknown error")
                print(f"OpenRouter error {resp.status_code}: {error_msg}")
                raise HTTPException(status_code=502, detail=f"OpenRouter error: {error_msg}")
            answer = resp.json()["choices"][0]["message"]["content"].strip()
            return {"answer": answer}
    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")




@app.get("/api/regions/{region_id}/dashboard", response_model=DashboardMetrics)
async def api_get_dashboard(region_id: str, days: int = Query(14, ge=1, le=90), db: AsyncSession = Depends(get_db)):
    if region_id not in REGION_ID_TO_NAME:
        raise HTTPException(status_code=404, detail="Region not found")
    return await get_real_dashboard_metrics(db, region_id, days)


@app.get("/api/regions/{region_id}/houses", response_model=List[HouseListItem])
async def api_get_houses(
    region_id: str,
    status: Optional[str] = Query(None, regex="^(red|yellow|green|in_work)$"),
    incident_status: Optional[str] = Query(None),
    search: Optional[str] = Query(None),
    db: AsyncSession = Depends(get_db),
):
    if region_id not in REGION_ID_TO_NAME:
        raise HTTPException(status_code=404, detail="Region not found")
    return await get_real_house_list(
        db=db,
        region_id=region_id,
        status=status,
        incident_status=incident_status,
        search=search,
    )


@app.get("/api/v2/houses/options")
async def get_houses_options_v2(db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –í–°–ï–• –¥–æ–º–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (v2).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç lublino_houses_id.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —É–±–∏—Ä–∞–µ–º LIMIT
        # –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π LIMIT, –µ—Å–ª–∏ÊãÖÂøÉ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
        # –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –±—É–¥—É—â–µ–º
        result = await db.execute(
            select(LublinoHousesId.id_house, LublinoHousesId.unom, LublinoHousesId.simple_address)
            # .limit(10000) # –ü—Ä–∏–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
            .order_by(LublinoHousesId.simple_address, LublinoHousesId.unom) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        )
        houses = result.fetchall()
        return [
            {
                "id_house": house.id_house,
                "unom": house.unom,
                "simple_address": house.simple_address
            }
            for house in houses
        ]
    except Exception as e:
        print(f"Error getting houses options (v2): {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        return [
            {
                "id_house": 1,
                "unom": 12345,
                "simple_address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1"
            },
            {
                "id_house": 2,
                "unom": 12346,
                "simple_address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2"
            }
        ]

@app.post("/api/v2/incidents/create")
async def create_incident_v2(
    payload: dict,
    db: AsyncSession = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç (v2).
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ id_house –≤ lublino_houses_id, –ø–æ–ª—É—á–∞–µ—Ç unom –æ—Ç—Ç—É–¥–∞.
    –î–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤ status_houses.
    """
    id_house = payload.get("id_house")
    status_incident = payload.get("status_incident")
    house_health = payload.get("house_health")

    if not all([id_house, status_incident, house_health]):
        raise HTTPException(status_code=400, detail="Missing required fields: id_house, status_incident, house_health")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ id_house –≤ lublino_houses_id
        house_result = await db.execute(
            select(LublinoHousesId.unom, LublinoHousesId.address).where(LublinoHousesId.id_house == id_house)
        )
        house_info = house_result.fetchone()

        if house_info is None:
            # id_house –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ lublino_houses_id
            raise HTTPException(status_code=404, detail=f"House with id_house {id_house} not found in lublino_houses_id table")

        unom = house_info.unom
        full_address = house_info.address

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ status_houses
        result = await db.execute(
            select(StatusHealth).where(StatusHealth.id_house == id_house)
        )
        existing = result.scalar_one_or_none()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing.status_incident = status_incident
            existing.house_health = house_health
            existing.unom = unom
            print(f"[v2] Updated existing incident for house {id_house}: status={status_incident}, health={house_health}, unom={unom}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_incident = StatusHealth(
                id_house=id_house,
                unom=unom,
                status_incident=status_incident,
                house_health=house_health
            )
            db.add(new_incident)
            print(f"[v2] Created new incident for house {id_house}: status={status_incident}, health={house_health}, unom={unom}")

        await db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
        if house_health.lower() in ['red', 'yellow']:
            if full_address:
                send_email_notification(
                    house_id=id_house,
                    address=full_address,
                    status=house_health,
                    incident_status=status_incident
                )
            else:
                print(f"Could not get address for house {id_house}, skipping email notification")

        return {"message": "–ò–Ω—Ü–∏–¥–µ–Ω—Ç (v2) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω"}

    except HTTPException:
        # –ï—Å–ª–∏ —ç—Ç–æ HTTPException (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404 –≤—ã—à–µ), –ø—Ä–æ–±—Ä–æ—Å–∏–º –µ–≥–æ –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        await db.rollback()
        print(f"Database error in create_incident_v2: {e}") # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ (v2) —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {str(e)}")


@app.get("/api/houses/options")
async def get_houses_options(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        result = await db.execute(text("""
            SELECT id_house, unom, simple_address 
            FROM lublino_houses_id 
            LIMIT 100
        """))
        houses = result.fetchall()
        return [
            {
                "id_house": house.id_house,
                "unom": house.unom,
                "simple_address": house.simple_address
            }
            for house in houses
        ]
    except Exception as e:
        print(f"Error getting houses options: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return [
            {
                "id_house": 1,
                "unom": 12345,
                "simple_address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1"
            },
            {
                "id_house": 2,
                "unom": 12346,
                "simple_address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2"
            }
        ]

@app.get("/api/houses/{house_id}", response_model=HouseDetail)
async def api_get_house_detail(house_id: str, db: AsyncSession = Depends(get_db)):
    try:
        data = await get_real_house_detail(db, house_id)
        if not data:
            raise HTTPException(status_code=404, detail="House not found")
        return data
    except Exception as e:
        print(f"Error getting house detail: {e}")
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")


@app.post("/api/houses/{house_id}/status")
async def api_update_house_status(
    house_id: str, 
    payload: dict,
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞"""
    try:
        house_id_int = int(house_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        result = await db.execute(
            text("SELECT id_house, house_health, status_incident FROM status_houses WHERE id_house = :id_house"),
            {"id_house": house_id_int}
        )
        existing = result.fetchone()
        
        if not existing:
            print(f"–ó–∞–ø–∏—Å—å –¥–ª—è –¥–æ–º–∞ {house_id_int} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise HTTPException(status_code=404, detail="House not found")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_health = existing.house_health
        old_status = existing.status_incident
        
        print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: house_health={existing.house_health}, status_incident={existing.status_incident}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_fields = {}
        update_sql_parts = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ status_incident
        if 'incident_status' in payload:
            update_sql_parts.append("status_incident = :incident_status")
            update_fields['incident_status'] = payload['incident_status']
            print(f"–û–±–Ω–æ–≤–ª—è–µ–º status_incident –Ω–∞: {payload['incident_status']}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ house_health
        if 'house_health' in payload:
            update_sql_parts.append("house_health = :house_health")
            update_fields['house_health'] = payload['house_health']
            print(f"–û–±–Ω–æ–≤–ª—è–µ–º house_health –Ω–∞: {payload['house_health']}")
        
        if update_sql_parts:
            update_sql = f"UPDATE status_houses SET {', '.join(update_sql_parts)} WHERE id_house = :id_house"
            update_fields['id_house'] = house_id_int
            
            print(f"–í—ã–ø–æ–ª–Ω—è–µ–º SQL: {update_sql} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {update_fields}")
            
            result = await db.execute(text(update_sql), update_fields)
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {result.rowcount}")
            await db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        check_result = await db.execute(
            text("SELECT house_health, status_incident FROM status_houses WHERE id_house = :id_house"),
            {"id_house": house_id_int}
        )
        updated = check_result.fetchone()
        print(f"–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: house_health={updated.house_health}, status_incident={updated.status_incident}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        if (updated.house_health and updated.house_health.lower() in ['red', 'yellow'] and 
            (old_health != updated.house_health or old_status != updated.status_incident)):
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ lublino_houses_id
            address_result = await db.execute(
                text("SELECT address FROM lublino_houses_id WHERE id_house = :id_house"),
                {"id_house": house_id_int}
            )
            full_address = address_result.scalar_one_or_none()
            
            if full_address:
                send_email_notification(
                    house_id=house_id_int,
                    address=full_address,
                    status=updated.house_health,
                    incident_status=updated.status_incident
                )
            else:
                print(f"Could not get address for house {house_id_int}, skipping email notification")
        
        return {
            "ok": True, 
            "message": "Status updated successfully",
            "updated_data": {
                "house_health": updated.house_health,
                "status_incident": updated.status_incident
            }
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid house_id format")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"Server error: {str(e)}")

@app.get("/api/houses/{house_id}/status-detail")
async def api_get_house_status_detail(house_id: str, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã status_houses"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã status_houses
        result = await db.execute(
            text("""
                SELECT id_house, unom, house_health, status_incident 
                FROM status_houses 
                WHERE id_house = :house_id
            """),
            {"house_id": int(house_id)}
        )
        status_info = result.fetchone()
        if not status_info:
            raise HTTPException(status_code=404, detail="House status not found")

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è house_health –≤ –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        health_reverse_mapping = {
            'Red': 'red',
            'Yellow': 'yellow',
            'Green': 'green'
        }
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è status_incident –≤ —Ä—É—Å—Å–∫–∏–π
        status_reverse_mapping = {
            'New': '–ù–æ–≤—ã–π',
            'Work': '–í —Ä–∞–±–æ—Ç–µ',
            'Repair': '–í —Ä–µ–º–æ–Ω—Ç–µ',
            'Resolved': '–†–µ—à–µ–Ω',
            'None': '–°—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–∞–Ω'
        }

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        house_result = await db.execute(
            text("""
                SELECT simple_address, address, nreg, unom, n_fias
                FROM lublino_houses_id 
                WHERE id_house = :house_id
            """),
            {"house_id": int(house_id)}
        )
        house_info = house_result.fetchone()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HouseDetail
        response_data = {
            "house_id": str(status_info.id_house),
            "address": house_info.address if house_info else "",
            "simple_address": house_info.simple_address if house_info else "",
            "region": "lublino",
            "status": health_reverse_mapping.get(status_info.house_health, 'green'),
            "incident_status": status_reverse_mapping.get(status_info.status_incident, '–ù–æ–≤—ã–π'),
            "fias": house_info.n_fias,
            "unom": house_info.unom, 
            "nreg": house_info.nreg,
        }
        return response_data

    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid house_id format")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")
    



@app.get("/api/regions/{region_id}/llm-context")
async def api_llm_context(region_id: str, db: AsyncSession = Depends(get_db)):
    if region_id not in REGION_ID_TO_NAME:
        raise HTTPException(status_code=404, detail="Region not found")
    return await get_real_llm_context(db, region_id)


@app.get("/health")
def health():
    return {"status": "ok", "time": datetime.utcnow().isoformat()}


@app.get("/db-health")
async def db_health_check(db: AsyncSession = Depends(get_db)):
    try:
        await db.execute(text("SELECT 1"))
        return {"status": "ok", "database": "connected"}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Database connection failed: {str(e)}"
        )


@app.get("/api/model-relearn/history")
async def get_model_history(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result = await db.execute(text("SELECT date_relearn, model_name, status_relearn FROM model_relearn ORDER BY date_relearn DESC"))
        records = result.fetchall()
        return [
            {
                "id": i,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ id
                "date": record.date_relearn.isoformat() if record.date_relearn else None,
                "model_name": record.model_name,
                "status_relearn": record.status_relearn
            }
            for i, record in enumerate(records)
        ]
    except Exception as e:
        print(f"Error getting model history: {e}")
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []

@app.post("/api/model-relearn/start")
async def start_model_retraining(
    payload: dict,
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        model_name = payload.get("model_name", f"model_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
        status_relearn = payload.get("status_relearn", "started")
        current_date = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
        await db.execute(text("""
            INSERT INTO model_relearn (model_name, status_relearn, date_relearn) 
            VALUES (:model_name, :status_relearn, :date_relearn)
        """), {
            "model_name": model_name, 
            "status_relearn": status_relearn,
            "date_relearn": current_date
        })
        await db.commit()
        return {"message": "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ"}
    except Exception as e:
        print(f"Error starting model retraining: {e}")
        return {"message": f"–û—à–∏–±–∫–∞: {str(e)}"}


@app.get("/api/forecast-overall")
async def get_forecast_overall(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã forecast_overall"""
    try:
        # Query the forecast_overall table (no region_id needed)
        result = await db.execute(
            text("SELECT v1, v2 FROM forecast_overall LIMIT 1")
        )
        row = result.fetchone()
        
        if row:
            return {"v1": row.v1, "v2": row.v2}
        else:
            # Return default values if no data found
            return {"v1": 0.0, "v2": 0.0}
    except Exception as e:
        print(f"Error fetching forecast data: {e}")
        raise HTTPException(status_code=500, detail="Error fetching forecast data")